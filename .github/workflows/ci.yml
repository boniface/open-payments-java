name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs for the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast feedback: Code style and formatting checks (runs first, fails fast)
  code-style:
    name: Code Style & Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'temurin'
          cache: gradle

      - name: Run code formatting check
        run: ./gradlew spotlessCheck --no-daemon

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest --no-daemon

  # Main build and test on multiple OS (but only Ubuntu for quality checks)
  build-and-test:
    name: Build & Test
    needs: code-style  # Only run after style checks pass
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        java: [ '25' ]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        if: runner.os != 'Windows'

      - name: Build and run all tests (includes unit + integration)
        run: ./gradlew build integrationTest --no-daemon --stacktrace

      - name: Generate JaCoCo coverage report (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: ./gradlew jacocoTestReport jacocoTestCoverageVerification --no-daemon

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.java }}
          path: |
            build/reports/tests/
            build/test-results/
          retention-days: 7

      - name: Upload coverage reports (Ubuntu only)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: coverage-reports
          path: build/reports/jacoco/
          retention-days: 30

      - name: Upload build artifacts (Ubuntu only)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar
            build/reports/
          retention-days: 7

      - name: Upload coverage to Codecov (Ubuntu only)
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 80
          title: 'Code Coverage Report'

  # Security and quality analysis (runs in parallel with build after style checks)
  security-and-quality:
    name: Security & Quality Analysis
    needs: code-style  # Only run after style checks pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'temurin'
          cache: gradle

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Compile code for static analysis (lightweight, no tests)
      - name: Compile code
        run: ./gradlew compileJava compileTestJava --no-daemon

      # Run all static analysis tools in a single Gradle invocation
      - name: Run static analysis (PMD, SpotBugs)
        run: ./gradlew pmdMain pmdTest spotbugsMain spotbugsTest --no-daemon --continue

      - name: Upload PMD report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pmd-report
          path: build/reports/pmd/
          retention-days: 30

      - name: Upload SpotBugs report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spotbugs-report
          path: build/reports/spotbugs/
          retention-days: 30

      - name: SonarCloud Scan
        if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonar --no-daemon \
            -Dsonar.projectKey=yourusername_open-payments-java \
            -Dsonar.organization=yourusername \
            -Dsonar.host.url=https://sonarcloud.io
        continue-on-error: true

  # Summary job to check overall status
  ci-status:
    name: CI Status Check
    needs: [code-style, build-and-test, security-and-quality]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.code-style.result }}" != "success" ]; then
            echo "❌ Code style checks failed"
            exit 1
          fi
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "❌ Build and tests failed"
            exit 1
          fi
          if [ "${{ needs.security-and-quality.result }}" != "success" ]; then
            echo "⚠️  Security/quality checks failed but not blocking"
          fi
          echo "✅ All critical checks passed"
